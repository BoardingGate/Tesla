name: Actualizar Puntos de Recarga DGT

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *'

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Instalar dependencias
        run: npm install axios xml-js

      - name: Ejecutar script de actualización
        id: run_script
        run: |
          node -e '
            const fs = require("fs");
            const axios = require("axios");
            const convert = require("xml-js");

            const DGT_URL = "https://infocar.dgt.es/datex2/v3/miterd/EnergyInfrastructureTablePublication/electrolineras.xml";

            async function fetchData() {
              try {
                console.log(`Pidiendo datos a ${DGT_URL}...`);
                const response = await axios.get(DGT_URL, {
                  headers: { "User-Agent": "Mozilla/5.0" },
                  timeout: 45000 
                });
                
                const xmlData = response.data;
                console.log("Datos XML recibidos. Parseando...");

                // --- CORRECCIÓN 1: Se ignoran los namespaces para un parseo más simple ---
                const jsonData = convert.xml2js(xmlData, { compact: true, spaces: 2, ignoreComment: true, ignoreDeclaration: true, ignoreDoctype: true, nativeType: true, alwaysArray: true });
                
                // --- CORRECCIÓN 2: Acceso robusto a los datos ---
                const sites = jsonData?.d2Payload?.[0]?.payloadPublication?.[0]?.energyInfrastructureTablePublication?.[0]?.energyInfrastructureTable?.[0]?.energyInfrastructureSite;
                
                if (!sites || sites.length === 0) {
                    throw new Error("No se pudo encontrar la lista de `energyInfrastructureSite` en la ruta esperada del XML.");
                }

                console.log(`Encontrados ${sites.length} sitios.`);
                const processedData = sites.map(site => {
                  try {
                    // --- CORRECCIÓN 3: Acceso a datos con optional chaining y valor por defecto ---
                    const fac = site.energyInfrastructureSiteExtension?.[0]?.energyFacility?.[0] || {};
                    const loc = site.locationReference?.[0]?.pointLocation?.[0] || {};

                    const lat = loc.pointCoordinates?.[0]?.latitude?.[0]?._text;
                    const lon = loc.pointCoordinates?.[0]?.longitude?.[0]?._text;

                    if (lat === undefined || lon === undefined) return null;

                    // Función para extraer valores de forma segura
                    const getValue = (node) => node?.[0]?.values?.[0]?.value?.[0]?._text || null;
                    const getDirectValue = (node) => node?.[0]?._text || null;
                    const getArrayValues = (node) => (node || []).map(n => n.values?.[0]?.value?.[0]?._text).filter(Boolean).join(", ");

                    return {
                      address: getValue(fac.name) || "Dirección no disponible",
                      lat: parseFloat(lat),
                      lon: parseFloat(lon),
                      power: getDirectValue(fac.power) || "N/A",
                      numPoints: getDirectValue(fac.numberOfChargingPoints) || "0",
                      available: getDirectValue(fac.availableCapacity) || "0",
                      price: getValue(fac.price) || "Consultar",
                      plugTypes: getArrayValues(fac.plugType) || "N/A",
                      payment: getArrayValues(fac.paymentMethod) || "No especificado",
                      services: getArrayValues(fac.service) || "No especificados",
                      hours: fac.operatingHours?.[0]?.label?.[0]?._text || "No especificado"
                    };
                  } catch (e) {
                    console.warn("Se omitió un punto de recarga por datos malformados:", e.message);
                    return null;
                  }
                }).filter(Boolean);

                if (processedData.length < 100) {
                    throw new Error(`Se procesaron muy pocos puntos (${processedData.length}). El fichero de la DGT podría estar vacío o malformado.`);
                }

                console.log(`Procesados ${processedData.length} puntos de recarga válidos.`);
                fs.writeFileSync("pdrs.json", JSON.stringify(processedData, null, 2));
                console.log("Fichero pdrs.json actualizado correctamente.");

              } catch (error) {
                console.error("ERROR FATAL en el script:", error.message);
                process.exit(1);
              }
            }

            fetchData();
          '
      
      - name: Commit y Push de los cambios
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: Actualización automática de puntos de recarga DGT"
          file_pattern: 'pdrs.json'
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"
