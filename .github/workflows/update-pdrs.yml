name: Actualizar Puntos de Recarga DGT

on:
  workflow_dispatch:
  schedule:
    - cron: '0 5 * * *' # Se ejecuta todos los días a las 5:00 AM UTC

jobs:
  update-data:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del repositorio
        uses: actions/checkout@v3

      - name: Configurar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Instalar dependencias
        run: npm install axios xml-js

      - name: Ejecutar script de actualización
        id: run_script
        run: |
          node -e '
            const fs = require("fs");
            const axios = require("axios");
            const convert = require("xml-js");

            const DGT_URL = "https://infocar.dgt.es/datex2/v3/miterd/EnergyInfrastructureTablePublication/electrolineras.xml";

            // --- FUNCIÓN DE BÚSQUEDA ROBUSTA ---
            // Busca una clave en cualquier parte de un objeto, sin importar la anidación.
            function findKey(obj, keyToFind) {
              let result = null;
              if (!obj || typeof obj !== "object") return null;

              if (obj.hasOwnProperty(keyToFind)) {
                return obj[keyToFind];
              }

              for (const key of Object.keys(obj)) {
                const found = findKey(obj[key], keyToFind);
                if (found) {
                  result = found;
                  break;
                }
              }
              return result;
            }

            async function fetchData() {
              try {
                console.log(`Pidiendo datos a ${DGT_URL} simulando ser un navegador...`);
                
                const response = await axios.get(DGT_URL, {
                  headers: {
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
                  },
                  timeout: 30000
                });
                
                const xmlData = response.data;
                console.log("Datos XML recibidos. Parseando...");

                const jsonData = convert.xml2js(xmlData, { compact: true, spaces: 2 });
                
                // --- BÚSQUEDA INTELIGENTE EN LUGAR DE RUTA FIJA ---
                const sitesSource = findKey(jsonData, "energyInfrastructureSite");
                
                if (!sitesSource) {
                    throw new Error("No se pudo encontrar la lista de `energyInfrastructureSite` en el XML. La estructura es inesperada.");
                }
                
                // Aseguramos que `sites` siempre sea un array para poder iterar
                const sites = Array.isArray(sitesSource) ? sitesSource : [sitesSource];
                
                console.log(`Encontrados ${sites.length} sitios.`);
                const processedData = sites.map(site => {
                  try {
                    const lat = parseFloat(site?.pointCoordinates?.latitude?._text);
                    const lon = parseFloat(site?.pointCoordinates?.longitude?._text);

                    if (isNaN(lat) || isNaN(lon)) return null;

                    return {
                      address: site?.siteName?._text || "Dirección no disponible",
                      lat: lat, lon: lon,
                      power: site?.power?._text || "N/A",
                      numPoints: site?.numberOfChargingPoints?._text || "0",
                      available: site?.availableCapacity?._text || "0",
                      price: site?.price?._text || "Consultar",
                      plugTypes: Array.isArray(site?.plugType) ? site.plugType.map(p => p?._text).filter(Boolean).join(", ") : (site?.plugType?._text || "N/A"),
                      payment: Array.isArray(site?.paymentMethod) ? site.paymentMethod.map(p => p?._text).filter(Boolean).join(", ") : (site?.paymentMethod?._text || "No especificado"),
                      services: Array.isArray(site?.service) ? site.service.map(s => s?._text).filter(Boolean).join(", ") : (site?.service?._text || "No especificados"),
                      hours: site?.openingHours?._text || "No especificado"
                    };
                  } catch (e) {
                    return null;
                  }
                }).filter(Boolean);

                if (processedData.length < 100) {
                    throw new Error(`Se procesaron muy pocos puntos (${processedData.length}). El fichero de la DGT podría estar vacío o bloqueado.`);
                }

                console.log(`Procesados ${processedData.length} puntos de recarga válidos.`);
                fs.writeFileSync("pdrs.json", JSON.stringify(processedData, null, 2));
                console.log("Fichero pdrs.json actualizado correctamente.");

              } catch (error) {
                console.error("ERROR FATAL en el script:", error.message);
                process.exit(1);
              }
            }

            fetchData();
          '
      
      - name: Commit y Push de los cambios
        if: success()
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: Actualización automática de puntos de recarga DGT"
          file_pattern: 'pdrs.json'
          commit_user_name: "GitHub Actions Bot"
          commit_user_email: "actions@github.com"
          commit_author: "GitHub Actions Bot <actions@github.com>"
